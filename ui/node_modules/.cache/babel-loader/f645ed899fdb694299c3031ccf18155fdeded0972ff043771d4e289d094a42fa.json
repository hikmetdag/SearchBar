{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n/**\n * @module decorators\n *\n */\nimport classWrapper from './class_decorator';\nimport methodWrapper from './method_decorator';\nimport methodWrapperScoped from './method_decorator_scoped';\n\n/**\n * noopDecorator\n *\n * @access private\n * @return {undefined} Returns `undefined` so that the original undecorated instance/method is used\n */\nfunction noopDecorator() {\n  return undefined;\n}\n\n/**\n * _decorator\n *\n * @access private\n * @param {Function} methodFn The method wrapper to delegate to, based on whether user has specified a scoped decorator or not\n * @param {Array} ...args Remainder of arguments passed in\n * @return {Function} The decorated class or method\n */\nfunction _decorator(methodFn) {\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  // check the first argument to see if it's a user-supplied keycode or array\n  // of keycodes, or if it's the wrapped class or method\n  var testArg = args[0];\n  var isArray = Array.isArray(testArg);\n\n  // if the test argument is not an object or function, it is user-supplied\n  // keycodes. else there are no arguments and it's just the wrapped class\n  if (isArray || ~['string', 'number', 'symbol'].indexOf(typeof testArg === 'undefined' ? 'undefined' : _typeof(testArg))) {\n    var keys = isArray ? testArg : args;\n\n    // return the decorator function, which on the next call will look for\n    // the presence of a method name to determine if this is a wrapped method\n    // or component\n    return function (target, methodName, descriptor) {\n      return methodName ? methodFn({\n        target: target,\n        descriptor: descriptor,\n        keys: keys\n      }) : classWrapper(target, keys);\n    };\n  } else {\n    var WrappedComponent = args[0];\n    var methodName = args[1];\n\n    // method decorators without keycode (which) arguments are not allowed.\n    if (WrappedComponent && !methodName) {\n      return classWrapper.apply(undefined, args);\n    } else {\n      console.warn(methodName + ': Method decorators must have keycode arguments, so the decorator for this method will not do anything');\n      return noopDecorator;\n    }\n  }\n}\n\n/**\n * keydownScoped\n *\n * Method decorator that will look for changes to its targeted component's\n * `keydown` props to decide when to trigger, rather than responding directly\n * to keydown events. This lets you specify a @keydown decorated class higher\n * up in the view hierarchy for larger scoping of keydown events, or for\n * programmatically sending keydown events as props into the components in order\n * to trigger decorated methods with matching keys.\n *\n * @access public\n * @param {Array} ...args  All (or no) arguments passed in from decoration\n * @return {Function} The decorated class or method\n */\nfunction keydownScoped() {\n  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return _decorator.apply(undefined, [methodWrapperScoped].concat(args));\n}\n\n/**\n * keydown\n *\n * The main decorator and default export, handles both classes and methods.\n *\n * @access public\n * @param {Array} ...args  All (or no) arguments passed in from decoration\n * @return {Function} The decorated class or method\n */\nfunction keydown() {\n  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  return _decorator.apply(undefined, [methodWrapper].concat(args));\n}\nexport default keydown;\nexport { keydownScoped };","map":{"version":3,"names":["_typeof","Symbol","iterator","obj","constructor","prototype","classWrapper","methodWrapper","methodWrapperScoped","noopDecorator","undefined","_decorator","methodFn","_len","arguments","length","args","Array","_key","testArg","isArray","indexOf","keys","target","methodName","descriptor","WrappedComponent","apply","console","warn","keydownScoped","_len2","_key2","concat","keydown","_len3","_key3"],"sources":["/Users/hackyourfuture/Desktop/searchbar/ui/node_modules/react-keydown/es/decorators/index.js"],"sourcesContent":["var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * @module decorators\n *\n */\nimport classWrapper from './class_decorator';\nimport methodWrapper from './method_decorator';\nimport methodWrapperScoped from './method_decorator_scoped';\n\n/**\n * noopDecorator\n *\n * @access private\n * @return {undefined} Returns `undefined` so that the original undecorated instance/method is used\n */\nfunction noopDecorator() {\n  return undefined;\n}\n\n/**\n * _decorator\n *\n * @access private\n * @param {Function} methodFn The method wrapper to delegate to, based on whether user has specified a scoped decorator or not\n * @param {Array} ...args Remainder of arguments passed in\n * @return {Function} The decorated class or method\n */\nfunction _decorator(methodFn) {\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  // check the first argument to see if it's a user-supplied keycode or array\n  // of keycodes, or if it's the wrapped class or method\n  var testArg = args[0];\n  var isArray = Array.isArray(testArg);\n\n  // if the test argument is not an object or function, it is user-supplied\n  // keycodes. else there are no arguments and it's just the wrapped class\n  if (isArray || ~['string', 'number', 'symbol'].indexOf(typeof testArg === 'undefined' ? 'undefined' : _typeof(testArg))) {\n    var keys = isArray ? testArg : args;\n\n    // return the decorator function, which on the next call will look for\n    // the presence of a method name to determine if this is a wrapped method\n    // or component\n    return function (target, methodName, descriptor) {\n      return methodName ? methodFn({ target: target, descriptor: descriptor, keys: keys }) : classWrapper(target, keys);\n    };\n  } else {\n    var WrappedComponent = args[0];\n    var methodName = args[1];\n\n    // method decorators without keycode (which) arguments are not allowed.\n    if (WrappedComponent && !methodName) {\n      return classWrapper.apply(undefined, args);\n    } else {\n      console.warn(methodName + ': Method decorators must have keycode arguments, so the decorator for this method will not do anything');\n      return noopDecorator;\n    }\n  }\n}\n\n/**\n * keydownScoped\n *\n * Method decorator that will look for changes to its targeted component's\n * `keydown` props to decide when to trigger, rather than responding directly\n * to keydown events. This lets you specify a @keydown decorated class higher\n * up in the view hierarchy for larger scoping of keydown events, or for\n * programmatically sending keydown events as props into the components in order\n * to trigger decorated methods with matching keys.\n *\n * @access public\n * @param {Array} ...args  All (or no) arguments passed in from decoration\n * @return {Function} The decorated class or method\n */\nfunction keydownScoped() {\n  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return _decorator.apply(undefined, [methodWrapperScoped].concat(args));\n}\n\n/**\n * keydown\n *\n * The main decorator and default export, handles both classes and methods.\n *\n * @access public\n * @param {Array} ...args  All (or no) arguments passed in from decoration\n * @return {Function} The decorated class or method\n */\nfunction keydown() {\n  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return _decorator.apply(undefined, [methodWrapper].concat(args));\n}\n\nexport default keydown;\n\nexport { keydownScoped };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}